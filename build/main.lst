ARM GAS  D:\cygwin64\tmp\cci2TeQV.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.MX_GPIO_Init,"ax",%progbits
  18              		.align	1
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv4-sp-d16
  24              	MX_GPIO_Init:
  25              	.LFB278:
  26              		.file 1 "Core/Src/main.c"
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * <h2><center>&copy; Copyright (c) 2021 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.</center></h2>
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software component is licensed by ST under BSD 3-Clause license,
  13:Core/Src/main.c ****   * the "License"; You may not use this file except in compliance with the
  14:Core/Src/main.c ****   * License. You may obtain a copy of the License at:
  15:Core/Src/main.c ****   *                        opensource.org/licenses/BSD-3-Clause
  16:Core/Src/main.c ****   *
  17:Core/Src/main.c ****   ******************************************************************************
  18:Core/Src/main.c ****   */
  19:Core/Src/main.c **** /* USER CODE END Header */
  20:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  21:Core/Src/main.c **** #include "main.h"
  22:Core/Src/main.c **** 
  23:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  24:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  25:Core/Src/main.c **** #include "main.h"
  26:Core/Src/main.c **** #include "stdio.h"
  27:Core/Src/main.c **** #include "string.h"
  28:Core/Src/main.c **** #include "wifi_module.h"
  29:Core/Src/main.c **** #include "wifi_globals.h"
  30:Core/Src/main.c **** #include "wifi_interface.h"
  31:Core/Src/main.c **** /* USER CODE END Includes */
  32:Core/Src/main.c **** 
ARM GAS  D:\cygwin64\tmp\cci2TeQV.s 			page 2


  33:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  34:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  35:Core/Src/main.c **** 
  36:Core/Src/main.c **** /* USER CODE END PTD */
  37:Core/Src/main.c **** 
  38:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  39:Core/Src/main.c **** /* USER CODE BEGIN PD */
  40:Core/Src/main.c **** #define MAX_MSG_SIZE 100
  41:Core/Src/main.c **** /* USER CODE END PD */
  42:Core/Src/main.c **** 
  43:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  44:Core/Src/main.c **** /* USER CODE BEGIN PM */
  45:Core/Src/main.c **** 
  46:Core/Src/main.c **** /* USER CODE END PM */
  47:Core/Src/main.c **** 
  48:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  49:Core/Src/main.c **** UART_HandleTypeDef huart2;
  50:Core/Src/main.c **** 
  51:Core/Src/main.c **** /* USER CODE BEGIN PV */
  52:Core/Src/main.c **** 
  53:Core/Src/main.c **** /* USER CODE END PV */
  54:Core/Src/main.c **** 
  55:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  56:Core/Src/main.c **** void SystemClock_Config(void);
  57:Core/Src/main.c **** static void MX_GPIO_Init(void);
  58:Core/Src/main.c **** static void MX_USART2_UART_Init(void);
  59:Core/Src/main.c **** /* USER CODE BEGIN PFP */
  60:Core/Src/main.c **** WiFi_Status_t wifi_get_AP_settings(void);
  61:Core/Src/main.c **** uint8_t user_buffer[1024];
  62:Core/Src/main.c **** __IO char http_char;
  63:Core/Src/main.c **** wifi_bool http_post_request = WIFI_FALSE;
  64:Core/Src/main.c **** 
  65:Core/Src/main.c **** uint8_t cin[1], console_count=0;
  66:Core/Src/main.c **** char console_ssid[40];
  67:Core/Src/main.c **** char console_psk[20];
  68:Core/Src/main.c **** char console_host[20];
  69:Core/Src/main.c **** wifi_bool set_AP_config = WIFI_FALSE;
  70:Core/Src/main.c **** 
  71:Core/Src/main.c **** /* Private functions ---------------------------------------------------------*/
  72:Core/Src/main.c **** void  SystemClock_Config(void);
  73:Core/Src/main.c **** void  UART_Msg_Gpio_Init(void);
  74:Core/Src/main.c **** void  USART_PRINT_MSG_Configuration(UART_HandleTypeDef *UART_MsgHandle, uint32_t baud_rate);
  75:Core/Src/main.c **** WiFi_Status_t wifi_get_AP_settings(void);
  76:Core/Src/main.c **** void print(char msg[]);
  77:Core/Src/main.c **** /* Private Declarartion ------------------------------------------------------*/
  78:Core/Src/main.c **** __IO wifi_state_t wifi_state;
  79:Core/Src/main.c **** wifi_config config;
  80:Core/Src/main.c **** UART_HandleTypeDef UART_MsgHandle;
  81:Core/Src/main.c **** 
  82:Core/Src/main.c **** char * ssid = "Grimm";
  83:Core/Src/main.c **** char * seckey = "aad089f19eb3e374cd436f9adc99a4d8210b14eec9621d8d50110797039cf906";
  84:Core/Src/main.c **** WiFi_Priv_Mode mode = WPA_Personal;
  85:Core/Src/main.c **** char * hostname = "httpbin.org";
  86:Core/Src/main.c **** char * post_hostname = "posttestserver.com";
  87:Core/Src/main.c **** char * gcfg_key1 = "ip_ipaddr";
  88:Core/Src/main.c **** char * gcfg_key2 = "nv_model";
  89:Core/Src/main.c **** 
ARM GAS  D:\cygwin64\tmp\cci2TeQV.s 			page 3


  90:Core/Src/main.c **** char wifi_ip_addr[20];
  91:Core/Src/main.c **** uint32_t baud_rate = 115200;
  92:Core/Src/main.c **** /* USER CODE END PFP */
  93:Core/Src/main.c **** 
  94:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
  95:Core/Src/main.c **** /* USER CODE BEGIN 0 */
  96:Core/Src/main.c **** 
  97:Core/Src/main.c **** /* USER CODE END 0 */
  98:Core/Src/main.c **** 
  99:Core/Src/main.c **** /**
 100:Core/Src/main.c ****   * @brief  The application entry point.
 101:Core/Src/main.c ****   * @retval int
 102:Core/Src/main.c ****   */
 103:Core/Src/main.c **** 
 104:Core/Src/main.c ****  /**
 105:Core/Src/main.c ****   * @brief  Main program
 106:Core/Src/main.c ****   * @param  None
 107:Core/Src/main.c ****   * @retval None
 108:Core/Src/main.c ****   */
 109:Core/Src/main.c **** int main(void)
 110:Core/Src/main.c **** {
 111:Core/Src/main.c **** 	
 112:Core/Src/main.c ****   WiFi_Status_t status = WiFi_MODULE_SUCCESS;
 113:Core/Src/main.c **** 
 114:Core/Src/main.c ****   char * path = "/get";
 115:Core/Src/main.c ****   uint32_t  port_num = 80;
 116:Core/Src/main.c ****   char * post_path = "/post.php/name=demo&email=mymail&subject=subj&body=message";
 117:Core/Src/main.c **** 
 118:Core/Src/main.c ****   HAL_Init();
 119:Core/Src/main.c ****   SystemClock_Config();
 120:Core/Src/main.c **** 
 121:Core/Src/main.c **** 
 122:Core/Src/main.c ****   MX_GPIO_Init();
 123:Core/Src/main.c ****   MX_USART2_UART_Init();
 124:Core/Src/main.c ****   
 125:Core/Src/main.c ****   RetargetInit(&huart2);
 126:Core/Src/main.c ****   
 127:Core/Src/main.c ****   printf("UART Init complete!\r\n");
 128:Core/Src/main.c ****   /*while (1)
 129:Core/Src/main.c ****   {
 130:Core/Src/main.c ****     print("Hello world\r\n..");
 131:Core/Src/main.c ****   }*/
 132:Core/Src/main.c ****   /* USER CODE END 3 */
 133:Core/Src/main.c **** 
 134:Core/Src/main.c ****   status = wifi_get_AP_settings();
 135:Core/Src/main.c ****   if(status!=WiFi_MODULE_SUCCESS)
 136:Core/Src/main.c ****   {
 137:Core/Src/main.c ****     printf("Error in AP Settings\r\n");
 138:Core/Src/main.c ****     return 0;
 139:Core/Src/main.c ****   }
 140:Core/Src/main.c ****  
 141:Core/Src/main.c ****   printf("Wifi settings init complete!\r\n");
 142:Core/Src/main.c ****   printf("SSID: %s PASSCODE %s\r\n", console_ssid, console_psk);
 143:Core/Src/main.c ****   //UART_Configuration(baud_rate); 
 144:Core/Src/main.c ****   
 145:Core/Src/main.c ****   config.power=wifi_active;
 146:Core/Src/main.c ****   config.power_level=high;
ARM GAS  D:\cygwin64\tmp\cci2TeQV.s 			page 4


 147:Core/Src/main.c ****   config.dhcp=on;//use DHCP IP address   
 148:Core/Src/main.c ****   config.mcu_baud_rate = baud_rate;
 149:Core/Src/main.c ****   wifi_state = wifi_state_idle;
 150:Core/Src/main.c ****   
 151:Core/Src/main.c ****   printf("Initializing the wifi module...\r\n");
 152:Core/Src/main.c ****   
 153:Core/Src/main.c ****   /* Init the wi-fi module */  
 154:Core/Src/main.c ****   status = wifi_init(&config);
 155:Core/Src/main.c ****   if(status!=WiFi_MODULE_SUCCESS)
 156:Core/Src/main.c ****   {
 157:Core/Src/main.c ****     printf("Error in Config\r\n");
 158:Core/Src/main.c ****     return 0;
 159:Core/Src/main.c ****   }
 160:Core/Src/main.c ****   
 161:Core/Src/main.c ****   printf("Init success, state code: %d\r\n", wifi_state);
 162:Core/Src/main.c ****   wifi_state = wifi_state_ready;
 163:Core/Src/main.c **** 
 164:Core/Src/main.c ****   while (1)
 165:Core/Src/main.c ****   {
 166:Core/Src/main.c ****     switch (wifi_state) 
 167:Core/Src/main.c ****     {
 168:Core/Src/main.c ****     case wifi_state_reset:
 169:Core/Src/main.c **** 		printf("\r\n >>RESET\r\n");
 170:Core/Src/main.c ****         break;
 171:Core/Src/main.c **** 
 172:Core/Src/main.c ****     case wifi_state_ready:
 173:Core/Src/main.c ****         printf("\r\n >>connecting to AP...\r\n");
 174:Core/Src/main.c ****         wifi_connect(console_ssid, console_psk, mode);
 175:Core/Src/main.c ****         wifi_state = wifi_state_idle;
 176:Core/Src/main.c ****         break;
 177:Core/Src/main.c **** 
 178:Core/Src/main.c ****     case wifi_state_connected:
 179:Core/Src/main.c ****         printf("\r\n >>connected...\r\n");
 180:Core/Src/main.c ****         wifi_state = wifi_state_activity;
 181:Core/Src/main.c ****         break;
 182:Core/Src/main.c **** 
 183:Core/Src/main.c ****     case wifi_state_disconnected:
 184:Core/Src/main.c **** 		printf("\r\n >>Disconnected\r\n");
 185:Core/Src/main.c ****         wifi_state = wifi_state_reset;
 186:Core/Src/main.c ****         break;
 187:Core/Src/main.c **** 
 188:Core/Src/main.c ****     case wifi_state_activity:
 189:Core/Src/main.c **** 		printf("\r\n >>Activity\r\n");
 190:Core/Src/main.c ****         status = wifi_get_IP_address((uint8_t*)wifi_ip_addr);
 191:Core/Src/main.c ****         //print("\r\n>>IP address is %s\r\n", wifi_ip_addr);
 192:Core/Src/main.c ****         
 193:Core/Src/main.c ****         memset(wifi_ip_addr, 0x00, 20);
 194:Core/Src/main.c ****         
 195:Core/Src/main.c ****         status = GET_Configuration_Value(gcfg_key2,(uint32_t *)wifi_ip_addr);
 196:Core/Src/main.c ****         //print("\r\n>>model no is %s\r\n", wifi_ip_addr);
 197:Core/Src/main.c **** 
 198:Core/Src/main.c ****         if(http_post_request)
 199:Core/Src/main.c ****             wifi_state = wifi_state_inter;//do a HTTP-POST
 200:Core/Src/main.c ****         else
 201:Core/Src/main.c ****         {
 202:Core/Src/main.c ****           printf("\r\n>>WiFi_HTTPGET\r\n");
 203:Core/Src/main.c ****         
ARM GAS  D:\cygwin64\tmp\cci2TeQV.s 			page 5


 204:Core/Src/main.c ****           status = wifi_http_get((uint8_t *)console_host, (uint8_t *)path, port_num);
 205:Core/Src/main.c ****       
 206:Core/Src/main.c ****           if(status == WiFi_MODULE_SUCCESS)
 207:Core/Src/main.c ****           {
 208:Core/Src/main.c ****              printf("\r\nHTTP GET OK\r\n");
 209:Core/Src/main.c ****           }
 210:Core/Src/main.c ****           else
 211:Core/Src/main.c ****           {
 212:Core/Src/main.c ****               print("\r\nHTTP GET Error\r\n");
 213:Core/Src/main.c ****           }
 214:Core/Src/main.c ****           wifi_state = wifi_state_idle;
 215:Core/Src/main.c ****         }
 216:Core/Src/main.c ****         
 217:Core/Src/main.c ****         break;
 218:Core/Src/main.c **** 
 219:Core/Src/main.c ****     case wifi_state_inter:        
 220:Core/Src/main.c **** 
 221:Core/Src/main.c ****         printf("\r\n>>Posting data to posttestserver.com..\r\n");  
 222:Core/Src/main.c **** 
 223:Core/Src/main.c ****         status = wifi_http_post((uint8_t *)post_hostname, (uint8_t *)post_path, port_num); 
 224:Core/Src/main.c **** 
 225:Core/Src/main.c ****         if(status == WiFi_MODULE_SUCCESS)    
 226:Core/Src/main.c ****         {
 227:Core/Src/main.c ****           printf("\r\nHTTP POST OK\r\n");
 228:Core/Src/main.c ****         }
 229:Core/Src/main.c ****         else
 230:Core/Src/main.c ****         {
 231:Core/Src/main.c ****           printf("\r\nHTTP POST Error\r\n");
 232:Core/Src/main.c ****         }        
 233:Core/Src/main.c **** 
 234:Core/Src/main.c ****         wifi_state = wifi_state_idle;
 235:Core/Src/main.c ****         break;
 236:Core/Src/main.c **** 
 237:Core/Src/main.c ****     case wifi_state_print_data:
 238:Core/Src/main.c ****         printf((char*)user_buffer);
 239:Core/Src/main.c **** 
 240:Core/Src/main.c ****         wifi_state = wifi_state_idle;
 241:Core/Src/main.c **** 
 242:Core/Src/main.c ****         break;
 243:Core/Src/main.c ****     case wifi_state_idle:        
 244:Core/Src/main.c ****         printf("."); 
 245:Core/Src/main.c ****         fflush(stdout);
 246:Core/Src/main.c ****         HAL_Delay(500);
 247:Core/Src/main.c **** 
 248:Core/Src/main.c ****         break;
 249:Core/Src/main.c **** 
 250:Core/Src/main.c ****     default:
 251:Core/Src/main.c ****         break;
 252:Core/Src/main.c ****     }
 253:Core/Src/main.c ****   }
 254:Core/Src/main.c **** }
 255:Core/Src/main.c **** 
 256:Core/Src/main.c **** /**
 257:Core/Src/main.c ****   * @brief System Clock Configuration
 258:Core/Src/main.c ****   * @retval None
 259:Core/Src/main.c ****   */
 260:Core/Src/main.c **** void SystemClock_Config(void)
ARM GAS  D:\cygwin64\tmp\cci2TeQV.s 			page 6


 261:Core/Src/main.c **** {
 262:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 263:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 264:Core/Src/main.c **** 
 265:Core/Src/main.c ****   /** Configure the main internal regulator output voltage
 266:Core/Src/main.c ****   */
 267:Core/Src/main.c ****   __HAL_RCC_PWR_CLK_ENABLE();
 268:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 269:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 270:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 271:Core/Src/main.c ****   */
 272:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 273:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 274:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 275:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 276:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 277:Core/Src/main.c ****   {
 278:Core/Src/main.c ****     Error_Handler();
 279:Core/Src/main.c ****   }
 280:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 281:Core/Src/main.c ****   */
 282:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 283:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 284:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 285:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 286:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 287:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 288:Core/Src/main.c **** 
 289:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 290:Core/Src/main.c ****   {
 291:Core/Src/main.c ****     Error_Handler();
 292:Core/Src/main.c ****   }
 293:Core/Src/main.c **** }
 294:Core/Src/main.c **** 
 295:Core/Src/main.c **** /**
 296:Core/Src/main.c ****   * @brief USART2 Initialization Function
 297:Core/Src/main.c ****   * @param None
 298:Core/Src/main.c ****   * @retval None
 299:Core/Src/main.c ****   */
 300:Core/Src/main.c **** static void MX_USART2_UART_Init(void)
 301:Core/Src/main.c **** {
 302:Core/Src/main.c **** 
 303:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 0 */
 304:Core/Src/main.c **** 
 305:Core/Src/main.c ****   /* USER CODE END USART2_Init 0 */
 306:Core/Src/main.c **** 
 307:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 1 */
 308:Core/Src/main.c **** 
 309:Core/Src/main.c ****   /* USER CODE END USART2_Init 1 */
 310:Core/Src/main.c ****   huart2.Instance = USART2;
 311:Core/Src/main.c ****   huart2.Init.BaudRate = 115200;
 312:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 313:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 314:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 315:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 316:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 317:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
ARM GAS  D:\cygwin64\tmp\cci2TeQV.s 			page 7


 318:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 319:Core/Src/main.c ****   {
 320:Core/Src/main.c ****     Error_Handler();
 321:Core/Src/main.c ****   }
 322:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 2 */
 323:Core/Src/main.c **** 
 324:Core/Src/main.c ****   /* USER CODE END USART2_Init 2 */
 325:Core/Src/main.c **** 
 326:Core/Src/main.c **** }
 327:Core/Src/main.c **** 
 328:Core/Src/main.c **** /**
 329:Core/Src/main.c ****   * @brief GPIO Initialization Function
 330:Core/Src/main.c ****   * @param None
 331:Core/Src/main.c ****   * @retval None
 332:Core/Src/main.c ****   */
 333:Core/Src/main.c **** static void MX_GPIO_Init(void)
 334:Core/Src/main.c **** {
  27              		.loc 1 334 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 8
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32 0000 82B0     		sub	sp, sp, #8
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 8
  35              	.LBB2:
 335:Core/Src/main.c **** 
 336:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 337:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  36              		.loc 1 337 0
  37 0002 0023     		movs	r3, #0
  38 0004 0193     		str	r3, [sp, #4]
  39 0006 064B     		ldr	r3, .L3
  40 0008 1A6B     		ldr	r2, [r3, #48]
  41 000a 42F00102 		orr	r2, r2, #1
  42 000e 1A63     		str	r2, [r3, #48]
  43 0010 1B6B     		ldr	r3, [r3, #48]
  44 0012 03F00103 		and	r3, r3, #1
  45 0016 0193     		str	r3, [sp, #4]
  46 0018 019B     		ldr	r3, [sp, #4]
  47              	.LBE2:
 338:Core/Src/main.c **** 
 339:Core/Src/main.c **** }
  48              		.loc 1 339 0
  49 001a 02B0     		add	sp, sp, #8
  50              	.LCFI1:
  51              		.cfi_def_cfa_offset 0
  52              		@ sp needed
  53 001c 7047     		bx	lr
  54              	.L4:
  55 001e 00BF     		.align	2
  56              	.L3:
  57 0020 00380240 		.word	1073887232
  58              		.cfi_endproc
  59              	.LFE278:
  61              		.section	.text.MX_USART2_UART_Init,"ax",%progbits
  62              		.align	1
ARM GAS  D:\cygwin64\tmp\cci2TeQV.s 			page 8


  63              		.syntax unified
  64              		.thumb
  65              		.thumb_func
  66              		.fpu fpv4-sp-d16
  68              	MX_USART2_UART_Init:
  69              	.LFB277:
 301:Core/Src/main.c **** 
  70              		.loc 1 301 0
  71              		.cfi_startproc
  72              		@ args = 0, pretend = 0, frame = 0
  73              		@ frame_needed = 0, uses_anonymous_args = 0
  74 0000 08B5     		push	{r3, lr}
  75              	.LCFI2:
  76              		.cfi_def_cfa_offset 8
  77              		.cfi_offset 3, -8
  78              		.cfi_offset 14, -4
 310:Core/Src/main.c ****   huart2.Init.BaudRate = 115200;
  79              		.loc 1 310 0
  80 0002 0A48     		ldr	r0, .L9
  81 0004 0A4B     		ldr	r3, .L9+4
  82 0006 0360     		str	r3, [r0]
 311:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
  83              		.loc 1 311 0
  84 0008 4FF4E133 		mov	r3, #115200
  85 000c 4360     		str	r3, [r0, #4]
 312:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
  86              		.loc 1 312 0
  87 000e 0023     		movs	r3, #0
  88 0010 8360     		str	r3, [r0, #8]
 313:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
  89              		.loc 1 313 0
  90 0012 C360     		str	r3, [r0, #12]
 314:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
  91              		.loc 1 314 0
  92 0014 0361     		str	r3, [r0, #16]
 315:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  93              		.loc 1 315 0
  94 0016 0C22     		movs	r2, #12
  95 0018 4261     		str	r2, [r0, #20]
 316:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  96              		.loc 1 316 0
  97 001a 8361     		str	r3, [r0, #24]
 317:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
  98              		.loc 1 317 0
  99 001c C361     		str	r3, [r0, #28]
 318:Core/Src/main.c ****   {
 100              		.loc 1 318 0
 101 001e FFF7FEFF 		bl	HAL_UART_Init
 102              	.LVL0:
 103 0022 00B9     		cbnz	r0, .L8
 104              	.L5:
 105 0024 08BD     		pop	{r3, pc}
 106              	.L8:
 320:Core/Src/main.c ****   }
 107              		.loc 1 320 0
 108 0026 FFF7FEFF 		bl	Error_Handler
 109              	.LVL1:
ARM GAS  D:\cygwin64\tmp\cci2TeQV.s 			page 9


 326:Core/Src/main.c **** 
 110              		.loc 1 326 0
 111 002a FBE7     		b	.L5
 112              	.L10:
 113              		.align	2
 114              	.L9:
 115 002c 00000000 		.word	huart2
 116 0030 00440040 		.word	1073759232
 117              		.cfi_endproc
 118              	.LFE277:
 120              		.section	.text.SystemClock_Config,"ax",%progbits
 121              		.align	1
 122              		.global	SystemClock_Config
 123              		.syntax unified
 124              		.thumb
 125              		.thumb_func
 126              		.fpu fpv4-sp-d16
 128              	SystemClock_Config:
 129              	.LFB276:
 261:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 130              		.loc 1 261 0
 131              		.cfi_startproc
 132              		@ args = 0, pretend = 0, frame = 80
 133              		@ frame_needed = 0, uses_anonymous_args = 0
 134 0000 00B5     		push	{lr}
 135              	.LCFI3:
 136              		.cfi_def_cfa_offset 4
 137              		.cfi_offset 14, -4
 138 0002 95B0     		sub	sp, sp, #84
 139              	.LCFI4:
 140              		.cfi_def_cfa_offset 88
 262:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 141              		.loc 1 262 0
 142 0004 3022     		movs	r2, #48
 143 0006 0021     		movs	r1, #0
 144 0008 08A8     		add	r0, sp, #32
 145 000a FFF7FEFF 		bl	memset
 146              	.LVL2:
 263:Core/Src/main.c **** 
 147              		.loc 1 263 0
 148 000e 0023     		movs	r3, #0
 149 0010 0393     		str	r3, [sp, #12]
 150 0012 0493     		str	r3, [sp, #16]
 151 0014 0593     		str	r3, [sp, #20]
 152 0016 0693     		str	r3, [sp, #24]
 153 0018 0793     		str	r3, [sp, #28]
 154              	.LBB3:
 267:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 155              		.loc 1 267 0
 156 001a 0193     		str	r3, [sp, #4]
 157 001c 1A4A     		ldr	r2, .L17
 158 001e 116C     		ldr	r1, [r2, #64]
 159 0020 41F08051 		orr	r1, r1, #268435456
 160 0024 1164     		str	r1, [r2, #64]
 161 0026 126C     		ldr	r2, [r2, #64]
 162 0028 02F08052 		and	r2, r2, #268435456
 163 002c 0192     		str	r2, [sp, #4]
ARM GAS  D:\cygwin64\tmp\cci2TeQV.s 			page 10


 164 002e 019A     		ldr	r2, [sp, #4]
 165              	.LBE3:
 166              	.LBB4:
 268:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 167              		.loc 1 268 0
 168 0030 0293     		str	r3, [sp, #8]
 169 0032 1649     		ldr	r1, .L17+4
 170 0034 0A68     		ldr	r2, [r1]
 171 0036 22F44042 		bic	r2, r2, #49152
 172 003a 42F40042 		orr	r2, r2, #32768
 173 003e 0A60     		str	r2, [r1]
 174 0040 0A68     		ldr	r2, [r1]
 175 0042 02F44042 		and	r2, r2, #49152
 176 0046 0292     		str	r2, [sp, #8]
 177 0048 029A     		ldr	r2, [sp, #8]
 178              	.LBE4:
 272:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 179              		.loc 1 272 0
 180 004a 0222     		movs	r2, #2
 181 004c 0892     		str	r2, [sp, #32]
 273:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 182              		.loc 1 273 0
 183 004e 0122     		movs	r2, #1
 184 0050 0B92     		str	r2, [sp, #44]
 274:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 185              		.loc 1 274 0
 186 0052 1022     		movs	r2, #16
 187 0054 0C92     		str	r2, [sp, #48]
 275:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 188              		.loc 1 275 0
 189 0056 0E93     		str	r3, [sp, #56]
 276:Core/Src/main.c ****   {
 190              		.loc 1 276 0
 191 0058 08A8     		add	r0, sp, #32
 192 005a FFF7FEFF 		bl	HAL_RCC_OscConfig
 193              	.LVL3:
 194 005e 68B9     		cbnz	r0, .L15
 195              	.L12:
 282:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 196              		.loc 1 282 0
 197 0060 0F23     		movs	r3, #15
 198 0062 0393     		str	r3, [sp, #12]
 284:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 199              		.loc 1 284 0
 200 0064 0021     		movs	r1, #0
 201 0066 0491     		str	r1, [sp, #16]
 285:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 202              		.loc 1 285 0
 203 0068 0591     		str	r1, [sp, #20]
 286:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 204              		.loc 1 286 0
 205 006a 0691     		str	r1, [sp, #24]
 287:Core/Src/main.c **** 
 206              		.loc 1 287 0
 207 006c 0791     		str	r1, [sp, #28]
 289:Core/Src/main.c ****   {
 208              		.loc 1 289 0
ARM GAS  D:\cygwin64\tmp\cci2TeQV.s 			page 11


 209 006e 03A8     		add	r0, sp, #12
 210 0070 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 211              	.LVL4:
 212 0074 28B9     		cbnz	r0, .L16
 213              	.L11:
 293:Core/Src/main.c **** 
 214              		.loc 1 293 0
 215 0076 15B0     		add	sp, sp, #84
 216              	.LCFI5:
 217              		.cfi_remember_state
 218              		.cfi_def_cfa_offset 4
 219              		@ sp needed
 220 0078 5DF804FB 		ldr	pc, [sp], #4
 221              	.L15:
 222              	.LCFI6:
 223              		.cfi_restore_state
 278:Core/Src/main.c ****   }
 224              		.loc 1 278 0
 225 007c FFF7FEFF 		bl	Error_Handler
 226              	.LVL5:
 227 0080 EEE7     		b	.L12
 228              	.L16:
 291:Core/Src/main.c ****   }
 229              		.loc 1 291 0
 230 0082 FFF7FEFF 		bl	Error_Handler
 231              	.LVL6:
 293:Core/Src/main.c **** 
 232              		.loc 1 293 0
 233 0086 F6E7     		b	.L11
 234              	.L18:
 235              		.align	2
 236              	.L17:
 237 0088 00380240 		.word	1073887232
 238 008c 00700040 		.word	1073770496
 239              		.cfi_endproc
 240              	.LFE276:
 242              		.section	.text.wifi_get_AP_settings,"ax",%progbits
 243              		.align	1
 244              		.global	wifi_get_AP_settings
 245              		.syntax unified
 246              		.thumb
 247              		.thumb_func
 248              		.fpu fpv4-sp-d16
 250              	wifi_get_AP_settings:
 251              	.LFB279:
 340:Core/Src/main.c **** 
 341:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 342:Core/Src/main.c **** 
 343:Core/Src/main.c **** WiFi_Status_t wifi_get_AP_settings(void)
 344:Core/Src/main.c **** {
 252              		.loc 1 344 0
 253              		.cfi_startproc
 254              		@ args = 0, pretend = 0, frame = 0
 255              		@ frame_needed = 0, uses_anonymous_args = 0
 256 0000 10B5     		push	{r4, lr}
 257              	.LCFI7:
 258              		.cfi_def_cfa_offset 8
ARM GAS  D:\cygwin64\tmp\cci2TeQV.s 			page 12


 259              		.cfi_offset 4, -8
 260              		.cfi_offset 14, -4
 261              	.LVL7:
 345:Core/Src/main.c ****   WiFi_Status_t status = WiFi_MODULE_SUCCESS;
 346:Core/Src/main.c ****   printf("\r\n\n/********************************************************\n");
 262              		.loc 1 346 0
 263 0002 2548     		ldr	r0, .L21
 264 0004 FFF7FEFF 		bl	puts
 265              	.LVL8:
 347:Core/Src/main.c ****   printf("\r *                                                      *\n");
 266              		.loc 1 347 0
 267 0008 244C     		ldr	r4, .L21+4
 268 000a 2046     		mov	r0, r4
 269 000c FFF7FEFF 		bl	puts
 270              	.LVL9:
 348:Core/Src/main.c ****   printf("\r * X-CUBE-WIFI1 Expansion Software v3.1.1               *\n");
 271              		.loc 1 348 0
 272 0010 2348     		ldr	r0, .L21+8
 273 0012 FFF7FEFF 		bl	puts
 274              	.LVL10:
 349:Core/Src/main.c ****   printf("\r * X-NUCLEO-IDW0xx1 Wi-Fi Mini-AP Configuration.        *\n");
 275              		.loc 1 349 0
 276 0016 2348     		ldr	r0, .L21+12
 277 0018 FFF7FEFF 		bl	puts
 278              	.LVL11:
 350:Core/Src/main.c ****   printf("\r * HTTP-Request Example                                 *\n");
 279              		.loc 1 350 0
 280 001c 2248     		ldr	r0, .L21+16
 281 001e FFF7FEFF 		bl	puts
 282              	.LVL12:
 351:Core/Src/main.c ****   printf("\r *                                                      *\n");
 283              		.loc 1 351 0
 284 0022 2046     		mov	r0, r4
 285 0024 FFF7FEFF 		bl	puts
 286              	.LVL13:
 352:Core/Src/main.c ****   printf("\r *******************************************************/\n");
 287              		.loc 1 352 0
 288 0028 2048     		ldr	r0, .L21+20
 289 002a FFF7FEFF 		bl	puts
 290              	.LVL14:
 353:Core/Src/main.c ****   fflush(stdout);
 291              		.loc 1 353 0
 292 002e 204B     		ldr	r3, .L21+24
 293 0030 1B68     		ldr	r3, [r3]
 294 0032 9868     		ldr	r0, [r3, #8]
 295 0034 FFF7FEFF 		bl	fflush
 296              	.LVL15:
 354:Core/Src/main.c ****   printf("\r\n\nModule will connect with default settings.");
 297              		.loc 1 354 0
 298 0038 1E48     		ldr	r0, .L21+28
 299 003a FFF7FEFF 		bl	printf
 300              	.LVL16:
 355:Core/Src/main.c ****   
 356:Core/Src/main.c ****   memcpy(console_ssid, (const char*)ssid, strlen((char*)ssid));
 301              		.loc 1 356 0
 302 003e 1E4B     		ldr	r3, .L21+32
 303 0040 1C68     		ldr	r4, [r3]
ARM GAS  D:\cygwin64\tmp\cci2TeQV.s 			page 13


 304 0042 2046     		mov	r0, r4
 305 0044 FFF7FEFF 		bl	strlen
 306              	.LVL17:
 307 0048 0246     		mov	r2, r0
 308 004a 2146     		mov	r1, r4
 309 004c 1B48     		ldr	r0, .L21+36
 310 004e FFF7FEFF 		bl	memcpy
 311              	.LVL18:
 357:Core/Src/main.c ****   memcpy(console_psk, (const char*)seckey, strlen((char*)seckey));
 312              		.loc 1 357 0
 313 0052 1B4B     		ldr	r3, .L21+40
 314 0054 1C68     		ldr	r4, [r3]
 315 0056 2046     		mov	r0, r4
 316 0058 FFF7FEFF 		bl	strlen
 317              	.LVL19:
 318 005c 0246     		mov	r2, r0
 319 005e 2146     		mov	r1, r4
 320 0060 1848     		ldr	r0, .L21+44
 321 0062 FFF7FEFF 		bl	memcpy
 322              	.LVL20:
 358:Core/Src/main.c ****   memcpy(console_host, (const char*)hostname, strlen((char*)hostname));
 323              		.loc 1 358 0
 324 0066 184B     		ldr	r3, .L21+48
 325 0068 1C68     		ldr	r4, [r3]
 326 006a 2046     		mov	r0, r4
 327 006c FFF7FEFF 		bl	strlen
 328              	.LVL21:
 329 0070 0246     		mov	r2, r0
 330 0072 2146     		mov	r1, r4
 331 0074 1548     		ldr	r0, .L21+52
 332 0076 FFF7FEFF 		bl	memcpy
 333              	.LVL22:
 359:Core/Src/main.c ****   
 360:Core/Src/main.c ****   printf("\r\n/*************************************************************\r\n");
 334              		.loc 1 360 0
 335 007a 1548     		ldr	r0, .L21+56
 336 007c FFF7FEFF 		bl	puts
 337              	.LVL23:
 361:Core/Src/main.c ****   printf("\r\n * Configuration Complete                                     \r\n");
 338              		.loc 1 361 0
 339 0080 1448     		ldr	r0, .L21+60
 340 0082 FFF7FEFF 		bl	puts
 341              	.LVL24:
 362:Core/Src/main.c ****   printf("\r\n * Please make sure a Server is running at given hostname     \r\n");
 342              		.loc 1 362 0
 343 0086 1448     		ldr	r0, .L21+64
 344 0088 FFF7FEFF 		bl	puts
 345              	.LVL25:
 363:Core/Src/main.c ****   printf("\r\n *************************************************************\r\n");
 346              		.loc 1 363 0
 347 008c 1348     		ldr	r0, .L21+68
 348 008e FFF7FEFF 		bl	puts
 349              	.LVL26:
 364:Core/Src/main.c ****   
 365:Core/Src/main.c ****   return status;
 366:Core/Src/main.c **** }
 350              		.loc 1 366 0
ARM GAS  D:\cygwin64\tmp\cci2TeQV.s 			page 14


 351 0092 0020     		movs	r0, #0
 352 0094 10BD     		pop	{r4, pc}
 353              	.L22:
 354 0096 00BF     		.align	2
 355              	.L21:
 356 0098 00000000 		.word	.LC0
 357 009c 40000000 		.word	.LC1
 358 00a0 7C000000 		.word	.LC2
 359 00a4 B8000000 		.word	.LC3
 360 00a8 F4000000 		.word	.LC4
 361 00ac 30010000 		.word	.LC5
 362 00b0 00000000 		.word	_impure_ptr
 363 00b4 6C010000 		.word	.LC6
 364 00b8 00000000 		.word	.LANCHOR0
 365 00bc 00000000 		.word	console_ssid
 366 00c0 00000000 		.word	.LANCHOR1
 367 00c4 00000000 		.word	console_psk
 368 00c8 00000000 		.word	.LANCHOR2
 369 00cc 00000000 		.word	console_host
 370 00d0 9C010000 		.word	.LC7
 371 00d4 E0010000 		.word	.LC8
 372 00d8 24020000 		.word	.LC9
 373 00dc 68020000 		.word	.LC10
 374              		.cfi_endproc
 375              	.LFE279:
 377              		.section	.text.main,"ax",%progbits
 378              		.align	1
 379              		.global	main
 380              		.syntax unified
 381              		.thumb
 382              		.thumb_func
 383              		.fpu fpv4-sp-d16
 385              	main:
 386              	.LFB275:
 110:Core/Src/main.c **** 	
 387              		.loc 1 110 0
 388              		.cfi_startproc
 389              		@ args = 0, pretend = 0, frame = 0
 390              		@ frame_needed = 0, uses_anonymous_args = 0
 391 0000 10B5     		push	{r4, lr}
 392              	.LCFI8:
 393              		.cfi_def_cfa_offset 8
 394              		.cfi_offset 4, -8
 395              		.cfi_offset 14, -4
 396              	.LVL27:
 118:Core/Src/main.c ****   SystemClock_Config();
 397              		.loc 1 118 0
 398 0002 FFF7FEFF 		bl	HAL_Init
 399              	.LVL28:
 119:Core/Src/main.c **** 
 400              		.loc 1 119 0
 401 0006 FFF7FEFF 		bl	SystemClock_Config
 402              	.LVL29:
 122:Core/Src/main.c ****   MX_USART2_UART_Init();
 403              		.loc 1 122 0
 404 000a FFF7FEFF 		bl	MX_GPIO_Init
 405              	.LVL30:
ARM GAS  D:\cygwin64\tmp\cci2TeQV.s 			page 15


 123:Core/Src/main.c ****   
 406              		.loc 1 123 0
 407 000e FFF7FEFF 		bl	MX_USART2_UART_Init
 408              	.LVL31:
 125:Core/Src/main.c ****   
 409              		.loc 1 125 0
 410 0012 6048     		ldr	r0, .L46
 411 0014 FFF7FEFF 		bl	RetargetInit
 412              	.LVL32:
 127:Core/Src/main.c ****   /*while (1)
 413              		.loc 1 127 0
 414 0018 5F48     		ldr	r0, .L46+4
 415 001a FFF7FEFF 		bl	puts
 416              	.LVL33:
 134:Core/Src/main.c ****   if(status!=WiFi_MODULE_SUCCESS)
 417              		.loc 1 134 0
 418 001e FFF7FEFF 		bl	wifi_get_AP_settings
 419              	.LVL34:
 135:Core/Src/main.c ****   {
 420              		.loc 1 135 0
 421 0022 F0B9     		cbnz	r0, .L44
 141:Core/Src/main.c ****   printf("SSID: %s PASSCODE %s\r\n", console_ssid, console_psk);
 422              		.loc 1 141 0
 423 0024 5D48     		ldr	r0, .L46+8
 424              	.LVL35:
 425 0026 FFF7FEFF 		bl	puts
 426              	.LVL36:
 142:Core/Src/main.c ****   //UART_Configuration(baud_rate); 
 427              		.loc 1 142 0
 428 002a 5D4A     		ldr	r2, .L46+12
 429 002c 5D49     		ldr	r1, .L46+16
 430 002e 5E48     		ldr	r0, .L46+20
 431 0030 FFF7FEFF 		bl	printf
 432              	.LVL37:
 145:Core/Src/main.c ****   config.power_level=high;
 433              		.loc 1 145 0
 434 0034 5D4C     		ldr	r4, .L46+24
 435 0036 0023     		movs	r3, #0
 436 0038 6370     		strb	r3, [r4, #1]
 146:Core/Src/main.c ****   config.dhcp=on;//use DHCP IP address   
 437              		.loc 1 146 0
 438 003a 0223     		movs	r3, #2
 439 003c A370     		strb	r3, [r4, #2]
 147:Core/Src/main.c ****   config.mcu_baud_rate = baud_rate;
 440              		.loc 1 147 0
 441 003e 0122     		movs	r2, #1
 442 0040 E270     		strb	r2, [r4, #3]
 148:Core/Src/main.c ****   wifi_state = wifi_state_idle;
 443              		.loc 1 148 0
 444 0042 5B4A     		ldr	r2, .L46+28
 445 0044 1268     		ldr	r2, [r2]
 446 0046 6263     		str	r2, [r4, #52]
 149:Core/Src/main.c ****   
 447              		.loc 1 149 0
 448 0048 5A4A     		ldr	r2, .L46+32
 449 004a 1370     		strb	r3, [r2]
 151:Core/Src/main.c ****   
ARM GAS  D:\cygwin64\tmp\cci2TeQV.s 			page 16


 450              		.loc 1 151 0
 451 004c 5A48     		ldr	r0, .L46+36
 452 004e FFF7FEFF 		bl	puts
 453              	.LVL38:
 154:Core/Src/main.c ****   if(status!=WiFi_MODULE_SUCCESS)
 454              		.loc 1 154 0
 455 0052 2046     		mov	r0, r4
 456 0054 FFF7FEFF 		bl	wifi_init
 457              	.LVL39:
 155:Core/Src/main.c ****   {
 458              		.loc 1 155 0
 459 0058 40B1     		cbz	r0, .L26
 157:Core/Src/main.c ****     return 0;
 460              		.loc 1 157 0
 461 005a 5848     		ldr	r0, .L46+40
 462              	.LVL40:
 463 005c FFF7FEFF 		bl	puts
 464              	.LVL41:
 158:Core/Src/main.c ****   }
 465              		.loc 1 158 0
 466 0060 02E0     		b	.L25
 467              	.LVL42:
 468              	.L44:
 137:Core/Src/main.c ****     return 0;
 469              		.loc 1 137 0
 470 0062 5748     		ldr	r0, .L46+44
 471              	.LVL43:
 472 0064 FFF7FEFF 		bl	puts
 473              	.LVL44:
 474              	.L25:
 254:Core/Src/main.c **** 
 475              		.loc 1 254 0
 476 0068 0020     		movs	r0, #0
 477 006a 10BD     		pop	{r4, pc}
 478              	.LVL45:
 479              	.L26:
 161:Core/Src/main.c ****   wifi_state = wifi_state_ready;
 480              		.loc 1 161 0
 481 006c 514C     		ldr	r4, .L46+32
 482 006e 2178     		ldrb	r1, [r4]	@ zero_extendqisi2
 483 0070 5448     		ldr	r0, .L46+48
 484              	.LVL46:
 485 0072 FFF7FEFF 		bl	printf
 486              	.LVL47:
 162:Core/Src/main.c **** 
 487              		.loc 1 162 0
 488 0076 0123     		movs	r3, #1
 489 0078 2370     		strb	r3, [r4]
 490 007a 02E0     		b	.L28
 491              	.L29:
 169:Core/Src/main.c ****         break;
 492              		.loc 1 169 0
 493 007c 5248     		ldr	r0, .L46+52
 494 007e FFF7FEFF 		bl	puts
 495              	.LVL48:
 496              	.L28:
 166:Core/Src/main.c ****     {
ARM GAS  D:\cygwin64\tmp\cci2TeQV.s 			page 17


 497              		.loc 1 166 0
 498 0082 4C4B     		ldr	r3, .L46+32
 499 0084 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 500 0086 DBB2     		uxtb	r3, r3
 501 0088 082B     		cmp	r3, #8
 502 008a FAD8     		bhi	.L28
 503 008c 01A2     		adr	r2, .L30
 504 008e 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 505 0092 00BF     		.p2align 2
 506              	.L30:
 507 0094 7D000000 		.word	.L29+1
 508 0098 B9000000 		.word	.L31+1
 509 009c 7B010000 		.word	.L32+1
 510 00a0 D3000000 		.word	.L33+1
 511 00a4 83000000 		.word	.L28+1
 512 00a8 E1000000 		.word	.L34+1
 513 00ac EF000000 		.word	.L35+1
 514 00b0 43010000 		.word	.L36+1
 515 00b4 6D010000 		.word	.L37+1
 516              		.p2align 1
 517              	.L31:
 173:Core/Src/main.c ****         wifi_connect(console_ssid, console_psk, mode);
 518              		.loc 1 173 0
 519 00b8 4448     		ldr	r0, .L46+56
 520 00ba FFF7FEFF 		bl	puts
 521              	.LVL49:
 174:Core/Src/main.c ****         wifi_state = wifi_state_idle;
 522              		.loc 1 174 0
 523 00be 444B     		ldr	r3, .L46+60
 524 00c0 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 525 00c2 3749     		ldr	r1, .L46+12
 526 00c4 3748     		ldr	r0, .L46+16
 527 00c6 FFF7FEFF 		bl	wifi_connect
 528              	.LVL50:
 175:Core/Src/main.c ****         break;
 529              		.loc 1 175 0
 530 00ca 0222     		movs	r2, #2
 531 00cc 394B     		ldr	r3, .L46+32
 532 00ce 1A70     		strb	r2, [r3]
 176:Core/Src/main.c **** 
 533              		.loc 1 176 0
 534 00d0 D7E7     		b	.L28
 535              	.L33:
 179:Core/Src/main.c ****         wifi_state = wifi_state_activity;
 536              		.loc 1 179 0
 537 00d2 4048     		ldr	r0, .L46+64
 538 00d4 FFF7FEFF 		bl	puts
 539              	.LVL51:
 180:Core/Src/main.c ****         break;
 540              		.loc 1 180 0
 541 00d8 0622     		movs	r2, #6
 542 00da 364B     		ldr	r3, .L46+32
 543 00dc 1A70     		strb	r2, [r3]
 181:Core/Src/main.c **** 
 544              		.loc 1 181 0
 545 00de D0E7     		b	.L28
 546              	.L34:
ARM GAS  D:\cygwin64\tmp\cci2TeQV.s 			page 18


 184:Core/Src/main.c ****         wifi_state = wifi_state_reset;
 547              		.loc 1 184 0
 548 00e0 3D48     		ldr	r0, .L46+68
 549 00e2 FFF7FEFF 		bl	puts
 550              	.LVL52:
 185:Core/Src/main.c ****         break;
 551              		.loc 1 185 0
 552 00e6 0022     		movs	r2, #0
 553 00e8 324B     		ldr	r3, .L46+32
 554 00ea 1A70     		strb	r2, [r3]
 186:Core/Src/main.c **** 
 555              		.loc 1 186 0
 556 00ec C9E7     		b	.L28
 557              	.L35:
 189:Core/Src/main.c ****         status = wifi_get_IP_address((uint8_t*)wifi_ip_addr);
 558              		.loc 1 189 0
 559 00ee 3B48     		ldr	r0, .L46+72
 560 00f0 FFF7FEFF 		bl	puts
 561              	.LVL53:
 190:Core/Src/main.c ****         //print("\r\n>>IP address is %s\r\n", wifi_ip_addr);
 562              		.loc 1 190 0
 563 00f4 3A4C     		ldr	r4, .L46+76
 564 00f6 2046     		mov	r0, r4
 565 00f8 FFF7FEFF 		bl	wifi_get_IP_address
 566              	.LVL54:
 193:Core/Src/main.c ****         
 567              		.loc 1 193 0
 568 00fc 0023     		movs	r3, #0
 569 00fe 2360     		str	r3, [r4]	@ unaligned
 570 0100 6360     		str	r3, [r4, #4]	@ unaligned
 571 0102 A360     		str	r3, [r4, #8]	@ unaligned
 572 0104 E360     		str	r3, [r4, #12]	@ unaligned
 573 0106 2361     		str	r3, [r4, #16]	@ unaligned
 195:Core/Src/main.c ****         //print("\r\n>>model no is %s\r\n", wifi_ip_addr);
 574              		.loc 1 195 0
 575 0108 2146     		mov	r1, r4
 576 010a 364B     		ldr	r3, .L46+80
 577 010c 1868     		ldr	r0, [r3]
 578 010e FFF7FEFF 		bl	GET_Configuration_Value
 579              	.LVL55:
 198:Core/Src/main.c ****             wifi_state = wifi_state_inter;//do a HTTP-POST
 580              		.loc 1 198 0
 581 0112 354B     		ldr	r3, .L46+84
 582 0114 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 583 0116 1BB1     		cbz	r3, .L39
 199:Core/Src/main.c ****         else
 584              		.loc 1 199 0
 585 0118 0722     		movs	r2, #7
 586 011a 264B     		ldr	r3, .L46+32
 587 011c 1A70     		strb	r2, [r3]
 588 011e B0E7     		b	.L28
 589              	.L39:
 202:Core/Src/main.c ****         
 590              		.loc 1 202 0
 591 0120 3248     		ldr	r0, .L46+88
 592 0122 FFF7FEFF 		bl	puts
 593              	.LVL56:
ARM GAS  D:\cygwin64\tmp\cci2TeQV.s 			page 19


 204:Core/Src/main.c ****       
 594              		.loc 1 204 0
 595 0126 5022     		movs	r2, #80
 596 0128 3149     		ldr	r1, .L46+92
 597 012a 3248     		ldr	r0, .L46+96
 598 012c FFF7FEFF 		bl	wifi_http_get
 599              	.LVL57:
 206:Core/Src/main.c ****           {
 600              		.loc 1 206 0
 601 0130 18B1     		cbz	r0, .L45
 602              	.LVL58:
 603              	.L40:
 214:Core/Src/main.c ****         }
 604              		.loc 1 214 0
 605 0132 0222     		movs	r2, #2
 606 0134 1F4B     		ldr	r3, .L46+32
 607 0136 1A70     		strb	r2, [r3]
 608 0138 A3E7     		b	.L28
 609              	.LVL59:
 610              	.L45:
 208:Core/Src/main.c ****           }
 611              		.loc 1 208 0
 612 013a 2F48     		ldr	r0, .L46+100
 613              	.LVL60:
 614 013c FFF7FEFF 		bl	puts
 615              	.LVL61:
 616 0140 F7E7     		b	.L40
 617              	.L36:
 221:Core/Src/main.c **** 
 618              		.loc 1 221 0
 619 0142 2E48     		ldr	r0, .L46+104
 620 0144 FFF7FEFF 		bl	puts
 621              	.LVL62:
 223:Core/Src/main.c **** 
 622              		.loc 1 223 0
 623 0148 5022     		movs	r2, #80
 624 014a 2D49     		ldr	r1, .L46+108
 625 014c 2D4B     		ldr	r3, .L46+112
 626 014e 1868     		ldr	r0, [r3]
 627 0150 FFF7FEFF 		bl	wifi_http_post
 628              	.LVL63:
 225:Core/Src/main.c ****         {
 629              		.loc 1 225 0
 630 0154 30B9     		cbnz	r0, .L41
 227:Core/Src/main.c ****         }
 631              		.loc 1 227 0
 632 0156 2C48     		ldr	r0, .L46+116
 633              	.LVL64:
 634 0158 FFF7FEFF 		bl	puts
 635              	.LVL65:
 636              	.L42:
 234:Core/Src/main.c ****         break;
 637              		.loc 1 234 0
 638 015c 0222     		movs	r2, #2
 639 015e 154B     		ldr	r3, .L46+32
 640 0160 1A70     		strb	r2, [r3]
 235:Core/Src/main.c **** 
ARM GAS  D:\cygwin64\tmp\cci2TeQV.s 			page 20


 641              		.loc 1 235 0
 642 0162 8EE7     		b	.L28
 643              	.LVL66:
 644              	.L41:
 231:Core/Src/main.c ****         }        
 645              		.loc 1 231 0
 646 0164 2948     		ldr	r0, .L46+120
 647              	.LVL67:
 648 0166 FFF7FEFF 		bl	puts
 649              	.LVL68:
 650 016a F7E7     		b	.L42
 651              	.L37:
 238:Core/Src/main.c **** 
 652              		.loc 1 238 0
 653 016c 2848     		ldr	r0, .L46+124
 654 016e FFF7FEFF 		bl	printf
 655              	.LVL69:
 240:Core/Src/main.c **** 
 656              		.loc 1 240 0
 657 0172 0222     		movs	r2, #2
 658 0174 0F4B     		ldr	r3, .L46+32
 659 0176 1A70     		strb	r2, [r3]
 242:Core/Src/main.c ****     case wifi_state_idle:        
 660              		.loc 1 242 0
 661 0178 83E7     		b	.L28
 662              	.L32:
 244:Core/Src/main.c ****         fflush(stdout);
 663              		.loc 1 244 0
 664 017a 2E20     		movs	r0, #46
 665 017c FFF7FEFF 		bl	putchar
 666              	.LVL70:
 245:Core/Src/main.c ****         HAL_Delay(500);
 667              		.loc 1 245 0
 668 0180 244B     		ldr	r3, .L46+128
 669 0182 1B68     		ldr	r3, [r3]
 670 0184 9868     		ldr	r0, [r3, #8]
 671 0186 FFF7FEFF 		bl	fflush
 672              	.LVL71:
 246:Core/Src/main.c **** 
 673              		.loc 1 246 0
 674 018a 4FF4FA70 		mov	r0, #500
 675 018e FFF7FEFF 		bl	HAL_Delay
 676              	.LVL72:
 248:Core/Src/main.c **** 
 677              		.loc 1 248 0
 678 0192 76E7     		b	.L28
 679              	.L47:
 680              		.align	2
 681              	.L46:
 682 0194 00000000 		.word	huart2
 683 0198 00000000 		.word	.LC11
 684 019c 30000000 		.word	.LC13
 685 01a0 00000000 		.word	console_psk
 686 01a4 00000000 		.word	console_ssid
 687 01a8 50000000 		.word	.LC14
 688 01ac 00000000 		.word	config
 689 01b0 00000000 		.word	.LANCHOR3
ARM GAS  D:\cygwin64\tmp\cci2TeQV.s 			page 21


 690 01b4 00000000 		.word	wifi_state
 691 01b8 68000000 		.word	.LC15
 692 01bc 8C000000 		.word	.LC16
 693 01c0 18000000 		.word	.LC12
 694 01c4 A0000000 		.word	.LC17
 695 01c8 C0000000 		.word	.LC18
 696 01cc CC000000 		.word	.LC19
 697 01d0 00000000 		.word	.LANCHOR4
 698 01d4 E8000000 		.word	.LC20
 699 01d8 FC000000 		.word	.LC21
 700 01dc 10010000 		.word	.LC22
 701 01e0 00000000 		.word	wifi_ip_addr
 702 01e4 00000000 		.word	.LANCHOR5
 703 01e8 00000000 		.word	.LANCHOR6
 704 01ec 20010000 		.word	.LC23
 705 01f0 34010000 		.word	.LC24
 706 01f4 00000000 		.word	console_host
 707 01f8 3C010000 		.word	.LC25
 708 01fc 4C010000 		.word	.LC26
 709 0200 78010000 		.word	.LC27
 710 0204 00000000 		.word	.LANCHOR7
 711 0208 B4010000 		.word	.LC28
 712 020c C4010000 		.word	.LC29
 713 0210 00000000 		.word	user_buffer
 714 0214 00000000 		.word	_impure_ptr
 715              		.cfi_endproc
 716              	.LFE275:
 718              		.section	.text.print,"ax",%progbits
 719              		.align	1
 720              		.global	print
 721              		.syntax unified
 722              		.thumb
 723              		.thumb_func
 724              		.fpu fpv4-sp-d16
 726              	print:
 727              	.LFB280:
 367:Core/Src/main.c **** 
 368:Core/Src/main.c **** 
 369:Core/Src/main.c **** /******** Wi-Fi Indication User Callback *********/
 370:Core/Src/main.c **** void print(char msg[]) {
 728              		.loc 1 370 0
 729              		.cfi_startproc
 730              		@ args = 0, pretend = 0, frame = 0
 731              		@ frame_needed = 0, uses_anonymous_args = 0
 732              		@ link register save eliminated.
 733              	.LVL73:
 734 0000 7047     		bx	lr
 735              		.cfi_endproc
 736              	.LFE280:
 738              		.section	.text.ind_wifi_on,"ax",%progbits
 739              		.align	1
 740              		.global	ind_wifi_on
 741              		.syntax unified
 742              		.thumb
 743              		.thumb_func
 744              		.fpu fpv4-sp-d16
 746              	ind_wifi_on:
ARM GAS  D:\cygwin64\tmp\cci2TeQV.s 			page 22


 747              	.LFB281:
 371:Core/Src/main.c **** 	//signed char message[MAX_MSG_SIZE];
 372:Core/Src/main.c **** 	//strncpy(message, msg, MAX_MSG_SIZE);
 373:Core/Src/main.c ****     //HAL_UART_Transmit(&huart2, message, MAX_MSG_SIZE, 1000);
 374:Core/Src/main.c **** }
 375:Core/Src/main.c **** 
 376:Core/Src/main.c **** void ind_wifi_on()
 377:Core/Src/main.c **** {
 748              		.loc 1 377 0
 749              		.cfi_startproc
 750              		@ args = 0, pretend = 0, frame = 0
 751              		@ frame_needed = 0, uses_anonymous_args = 0
 752              		@ link register save eliminated.
 378:Core/Src/main.c ****   print("\r\n\nwifi started and ready...\r\n");
 379:Core/Src/main.c ****   wifi_state = wifi_state_ready;
 753              		.loc 1 379 0
 754 0000 0122     		movs	r2, #1
 755 0002 014B     		ldr	r3, .L50
 756 0004 1A70     		strb	r2, [r3]
 757 0006 7047     		bx	lr
 758              	.L51:
 759              		.align	2
 760              	.L50:
 761 0008 00000000 		.word	wifi_state
 762              		.cfi_endproc
 763              	.LFE281:
 765              		.section	.text.ind_wifi_connected,"ax",%progbits
 766              		.align	1
 767              		.global	ind_wifi_connected
 768              		.syntax unified
 769              		.thumb
 770              		.thumb_func
 771              		.fpu fpv4-sp-d16
 773              	ind_wifi_connected:
 774              	.LFB282:
 380:Core/Src/main.c **** }
 381:Core/Src/main.c ****   
 382:Core/Src/main.c **** void ind_wifi_connected()
 383:Core/Src/main.c **** {
 775              		.loc 1 383 0
 776              		.cfi_startproc
 777              		@ args = 0, pretend = 0, frame = 0
 778              		@ frame_needed = 0, uses_anonymous_args = 0
 779              		@ link register save eliminated.
 384:Core/Src/main.c ****   print("\r\nwifi connected...\r\n");
 385:Core/Src/main.c ****   wifi_state = wifi_state_connected;
 780              		.loc 1 385 0
 781 0000 0322     		movs	r2, #3
 782 0002 014B     		ldr	r3, .L53
 783 0004 1A70     		strb	r2, [r3]
 784 0006 7047     		bx	lr
 785              	.L54:
 786              		.align	2
 787              	.L53:
 788 0008 00000000 		.word	wifi_state
 789              		.cfi_endproc
 790              	.LFE282:
ARM GAS  D:\cygwin64\tmp\cci2TeQV.s 			page 23


 792              		.section	.text.ind_wifi_http_data_available,"ax",%progbits
 793              		.align	1
 794              		.global	ind_wifi_http_data_available
 795              		.syntax unified
 796              		.thumb
 797              		.thumb_func
 798              		.fpu fpv4-sp-d16
 800              	ind_wifi_http_data_available:
 801              	.LFB283:
 386:Core/Src/main.c **** }
 387:Core/Src/main.c **** 
 388:Core/Src/main.c **** void ind_wifi_http_data_available(uint8_t * data_ptr, uint32_t message_size)
 389:Core/Src/main.c **** {
 802              		.loc 1 389 0
 803              		.cfi_startproc
 804              		@ args = 0, pretend = 0, frame = 0
 805              		@ frame_needed = 0, uses_anonymous_args = 0
 806              	.LVL74:
 807 0000 08B5     		push	{r3, lr}
 808              	.LCFI9:
 809              		.cfi_def_cfa_offset 8
 810              		.cfi_offset 3, -8
 811              		.cfi_offset 14, -4
 390:Core/Src/main.c ****   //User is adviced to copy the data immediately to a user buffer memory as the data will be flushe
 391:Core/Src/main.c ****   print("\r\nData Callback\r\n");
 392:Core/Src/main.c ****   memcpy(user_buffer, data_ptr, message_size);
 812              		.loc 1 392 0
 813 0002 0A46     		mov	r2, r1
 814 0004 0146     		mov	r1, r0
 815              	.LVL75:
 816 0006 0248     		ldr	r0, .L57
 817              	.LVL76:
 818 0008 FFF7FEFF 		bl	memcpy
 819              	.LVL77:
 820 000c 08BD     		pop	{r3, pc}
 821              	.L58:
 822 000e 00BF     		.align	2
 823              	.L57:
 824 0010 00000000 		.word	user_buffer
 825              		.cfi_endproc
 826              	.LFE283:
 828              		.global	baud_rate
 829              		.comm	wifi_ip_addr,20,4
 830              		.global	gcfg_key2
 831              		.global	gcfg_key1
 832              		.global	post_hostname
 833              		.global	hostname
 834              		.global	mode
 835              		.global	seckey
 836              		.global	ssid
 837              		.comm	UART_MsgHandle,64,4
 838              		.comm	config,56,4
 839              		.comm	wifi_state,1,1
 840              		.global	set_AP_config
 841              		.comm	console_host,20,4
 842              		.comm	console_psk,20,4
 843              		.comm	console_ssid,40,4
ARM GAS  D:\cygwin64\tmp\cci2TeQV.s 			page 24


 844              		.global	console_count
 845              		.comm	cin,1,4
 846              		.global	http_post_request
 847              		.comm	http_char,1,1
 848              		.comm	user_buffer,1024,4
 849              		.comm	huart2,64,4
 850              		.section	.bss.console_count,"aw",%nobits
 853              	console_count:
 854 0000 00       		.space	1
 855              		.section	.bss.http_post_request,"aw",%nobits
 856              		.set	.LANCHOR6,. + 0
 859              	http_post_request:
 860 0000 00       		.space	1
 861              		.section	.bss.set_AP_config,"aw",%nobits
 864              	set_AP_config:
 865 0000 00       		.space	1
 866              		.section	.data.baud_rate,"aw",%progbits
 867              		.align	2
 868              		.set	.LANCHOR3,. + 0
 871              	baud_rate:
 872 0000 00C20100 		.word	115200
 873              		.section	.data.gcfg_key1,"aw",%progbits
 874              		.align	2
 877              	gcfg_key1:
 878 0000 0C000000 		.word	.LC31
 879              		.section	.data.gcfg_key2,"aw",%progbits
 880              		.align	2
 881              		.set	.LANCHOR5,. + 0
 884              	gcfg_key2:
 885 0000 00000000 		.word	.LC30
 886              		.section	.data.hostname,"aw",%progbits
 887              		.align	2
 888              		.set	.LANCHOR2,. + 0
 891              	hostname:
 892 0000 2C000000 		.word	.LC33
 893              		.section	.data.mode,"aw",%progbits
 894              		.set	.LANCHOR4,. + 0
 897              	mode:
 898 0000 02       		.byte	2
 899              		.section	.data.post_hostname,"aw",%progbits
 900              		.align	2
 901              		.set	.LANCHOR7,. + 0
 904              	post_hostname:
 905 0000 18000000 		.word	.LC32
 906              		.section	.data.seckey,"aw",%progbits
 907              		.align	2
 908              		.set	.LANCHOR1,. + 0
 911              	seckey:
 912 0000 38000000 		.word	.LC34
 913              		.section	.data.ssid,"aw",%progbits
 914              		.align	2
 915              		.set	.LANCHOR0,. + 0
 918              	ssid:
 919 0000 7C000000 		.word	.LC35
 920              		.section	.rodata.main.str1.4,"aMS",%progbits,1
 921              		.align	2
 922              	.LC11:
ARM GAS  D:\cygwin64\tmp\cci2TeQV.s 			page 25


 923 0000 55415254 		.ascii	"UART Init complete!\015\000"
 923      20496E69 
 923      7420636F 
 923      6D706C65 
 923      7465210D 
 924 0015 000000   		.space	3
 925              	.LC12:
 926 0018 4572726F 		.ascii	"Error in AP Settings\015\000"
 926      7220696E 
 926      20415020 
 926      53657474 
 926      696E6773 
 927 002e 0000     		.space	2
 928              	.LC13:
 929 0030 57696669 		.ascii	"Wifi settings init complete!\015\000"
 929      20736574 
 929      74696E67 
 929      7320696E 
 929      69742063 
 930 004e 0000     		.space	2
 931              	.LC14:
 932 0050 53534944 		.ascii	"SSID: %s PASSCODE %s\015\012\000"
 932      3A202573 
 932      20504153 
 932      53434F44 
 932      45202573 
 933 0067 00       		.space	1
 934              	.LC15:
 935 0068 496E6974 		.ascii	"Initializing the wifi module...\015\000"
 935      69616C69 
 935      7A696E67 
 935      20746865 
 935      20776966 
 936 0089 000000   		.space	3
 937              	.LC16:
 938 008c 4572726F 		.ascii	"Error in Config\015\000"
 938      7220696E 
 938      20436F6E 
 938      6669670D 
 938      00
 939 009d 000000   		.space	3
 940              	.LC17:
 941 00a0 496E6974 		.ascii	"Init success, state code: %d\015\012\000"
 941      20737563 
 941      63657373 
 941      2C207374 
 941      61746520 
 942 00bf 00       		.space	1
 943              	.LC18:
 944 00c0 0D0A203E 		.ascii	"\015\012 >>RESET\015\000"
 944      3E524553 
 944      45540D00 
 945              	.LC19:
 946 00cc 0D0A203E 		.ascii	"\015\012 >>connecting to AP...\015\000"
 946      3E636F6E 
 946      6E656374 
 946      696E6720 
ARM GAS  D:\cygwin64\tmp\cci2TeQV.s 			page 26


 946      746F2041 
 947 00e6 0000     		.space	2
 948              	.LC20:
 949 00e8 0D0A203E 		.ascii	"\015\012 >>connected...\015\000"
 949      3E636F6E 
 949      6E656374 
 949      65642E2E 
 949      2E0D00
 950 00fb 00       		.space	1
 951              	.LC21:
 952 00fc 0D0A203E 		.ascii	"\015\012 >>Disconnected\015\000"
 952      3E446973 
 952      636F6E6E 
 952      65637465 
 952      640D00
 953 010f 00       		.space	1
 954              	.LC22:
 955 0110 0D0A203E 		.ascii	"\015\012 >>Activity\015\000"
 955      3E416374 
 955      69766974 
 955      790D00
 956 011f 00       		.space	1
 957              	.LC23:
 958 0120 0D0A3E3E 		.ascii	"\015\012>>WiFi_HTTPGET\015\000"
 958      57694669 
 958      5F485454 
 958      50474554 
 958      0D00
 959 0132 0000     		.space	2
 960              	.LC24:
 961 0134 2F676574 		.ascii	"/get\000"
 961      00
 962 0139 000000   		.space	3
 963              	.LC25:
 964 013c 0D0A4854 		.ascii	"\015\012HTTP GET OK\015\000"
 964      54502047 
 964      4554204F 
 964      4B0D00
 965 014b 00       		.space	1
 966              	.LC26:
 967 014c 0D0A3E3E 		.ascii	"\015\012>>Posting data to posttestserver.com..\015\000"
 967      506F7374 
 967      696E6720 
 967      64617461 
 967      20746F20 
 968 0176 0000     		.space	2
 969              	.LC27:
 970 0178 2F706F73 		.ascii	"/post.php/name=demo&email=mymail&subject=subj&body="
 970      742E7068 
 970      702F6E61 
 970      6D653D64 
 970      656D6F26 
 971 01ab 6D657373 		.ascii	"message\000"
 971      61676500 
 972 01b3 00       		.space	1
 973              	.LC28:
 974 01b4 0D0A4854 		.ascii	"\015\012HTTP POST OK\015\000"
ARM GAS  D:\cygwin64\tmp\cci2TeQV.s 			page 27


 974      54502050 
 974      4F535420 
 974      4F4B0D00 
 975              	.LC29:
 976 01c4 0D0A4854 		.ascii	"\015\012HTTP POST Error\015\000"
 976      54502050 
 976      4F535420 
 976      4572726F 
 976      720D00
 977              		.section	.rodata.str1.4,"aMS",%progbits,1
 978              		.align	2
 979              	.LC30:
 980 0000 6E765F6D 		.ascii	"nv_model\000"
 980      6F64656C 
 980      00
 981 0009 000000   		.space	3
 982              	.LC31:
 983 000c 69705F69 		.ascii	"ip_ipaddr\000"
 983      70616464 
 983      7200
 984 0016 0000     		.space	2
 985              	.LC32:
 986 0018 706F7374 		.ascii	"posttestserver.com\000"
 986      74657374 
 986      73657276 
 986      65722E63 
 986      6F6D00
 987 002b 00       		.space	1
 988              	.LC33:
 989 002c 68747470 		.ascii	"httpbin.org\000"
 989      62696E2E 
 989      6F726700 
 990              	.LC34:
 991 0038 61616430 		.ascii	"aad089f19eb3e374cd436f9adc99a4d8210b14eec9621d8d501"
 991      38396631 
 991      39656233 
 991      65333734 
 991      63643433 
 992 006b 31303739 		.ascii	"10797039cf906\000"
 992      37303339 
 992      63663930 
 992      3600
 993 0079 000000   		.space	3
 994              	.LC35:
 995 007c 4772696D 		.ascii	"Grimm\000"
 995      6D00
 996              		.section	.rodata.wifi_get_AP_settings.str1.4,"aMS",%progbits,1
 997              		.align	2
 998              	.LC0:
 999 0000 0D0A0A2F 		.ascii	"\015\012\012/**************************************"
 999      2A2A2A2A 
 999      2A2A2A2A 
 999      2A2A2A2A 
 999      2A2A2A2A 
 1000 002a 2A2A2A2A 		.ascii	"******************\000"
 1000      2A2A2A2A 
 1000      2A2A2A2A 
ARM GAS  D:\cygwin64\tmp\cci2TeQV.s 			page 28


 1000      2A2A2A2A 
 1000      2A2A00
 1001 003d 000000   		.space	3
 1002              	.LC1:
 1003 0040 0D202A20 		.ascii	"\015 *                                             "
 1003      20202020 
 1003      20202020 
 1003      20202020 
 1003      20202020 
 1004 0070 20202020 		.ascii	"         *\000"
 1004      20202020 
 1004      202A00
 1005 007b 00       		.space	1
 1006              	.LC2:
 1007 007c 0D202A20 		.ascii	"\015 * X-CUBE-WIFI1 Expansion Software v3.1.1      "
 1007      582D4355 
 1007      42452D57 
 1007      49464931 
 1007      20457870 
 1008 00ac 20202020 		.ascii	"         *\000"
 1008      20202020 
 1008      202A00
 1009 00b7 00       		.space	1
 1010              	.LC3:
 1011 00b8 0D202A20 		.ascii	"\015 * X-NUCLEO-IDW0xx1 Wi-Fi Mini-AP Configuration"
 1011      582D4E55 
 1011      434C454F 
 1011      2D494457 
 1011      30787831 
 1012 00e8 2E202020 		.ascii	".        *\000"
 1012      20202020 
 1012      202A00
 1013 00f3 00       		.space	1
 1014              	.LC4:
 1015 00f4 0D202A20 		.ascii	"\015 * HTTP-Request Example                        "
 1015      48545450 
 1015      2D526571 
 1015      75657374 
 1015      20457861 
 1016 0124 20202020 		.ascii	"         *\000"
 1016      20202020 
 1016      202A00
 1017 012f 00       		.space	1
 1018              	.LC5:
 1019 0130 0D202A2A 		.ascii	"\015 **********************************************"
 1019      2A2A2A2A 
 1019      2A2A2A2A 
 1019      2A2A2A2A 
 1019      2A2A2A2A 
 1020 0160 2A2A2A2A 		.ascii	"*********/\000"
 1020      2A2A2A2A 
 1020      2A2F00
 1021 016b 00       		.space	1
 1022              	.LC6:
 1023 016c 0D0A0A4D 		.ascii	"\015\012\012Module will connect with default settin"
 1023      6F64756C 
 1023      65207769 
ARM GAS  D:\cygwin64\tmp\cci2TeQV.s 			page 29


 1023      6C6C2063 
 1023      6F6E6E65 
 1024 0196 67732E00 		.ascii	"gs.\000"
 1025 019a 0000     		.space	2
 1026              	.LC7:
 1027 019c 0D0A2F2A 		.ascii	"\015\012/******************************************"
 1027      2A2A2A2A 
 1027      2A2A2A2A 
 1027      2A2A2A2A 
 1027      2A2A2A2A 
 1028 01c9 2A2A2A2A 		.ascii	"*******************\015\000"
 1028      2A2A2A2A 
 1028      2A2A2A2A 
 1028      2A2A2A2A 
 1028      2A2A2A0D 
 1029 01de 0000     		.space	2
 1030              	.LC8:
 1031 01e0 0D0A202A 		.ascii	"\015\012 * Configuration Complete                  "
 1031      20436F6E 
 1031      66696775 
 1031      72617469 
 1031      6F6E2043 
 1032 020d 20202020 		.ascii	"                   \015\000"
 1032      20202020 
 1032      20202020 
 1032      20202020 
 1032      2020200D 
 1033 0222 0000     		.space	2
 1034              	.LC9:
 1035 0224 0D0A202A 		.ascii	"\015\012 * Please make sure a Server is running at "
 1035      20506C65 
 1035      61736520 
 1035      6D616B65 
 1035      20737572 
 1036 0251 67697665 		.ascii	"given hostname     \015\000"
 1036      6E20686F 
 1036      73746E61 
 1036      6D652020 
 1036      2020200D 
 1037 0266 0000     		.space	2
 1038              	.LC10:
 1039 0268 0D0A202A 		.ascii	"\015\012 ******************************************"
 1039      2A2A2A2A 
 1039      2A2A2A2A 
 1039      2A2A2A2A 
 1039      2A2A2A2A 
 1040 0295 2A2A2A2A 		.ascii	"*******************\015\000"
 1040      2A2A2A2A 
 1040      2A2A2A2A 
 1040      2A2A2A2A 
 1040      2A2A2A0D 
 1041              		.text
 1042              	.Letext0:
 1043              		.file 2 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\arm-none-eabi\\include
 1044              		.file 3 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\arm-none-eabi\\include
 1045              		.file 4 "Drivers/CMSIS/Include/core_cm4.h"
 1046              		.file 5 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/system_stm32f4xx.h"
ARM GAS  D:\cygwin64\tmp\cci2TeQV.s 			page 30


 1047              		.file 6 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f401xe.h"
 1048              		.file 7 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f4xx.h"
 1049              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 1050              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 1051              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 1052              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 1053              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 1054              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 1055              		.file 14 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 1056              		.file 15 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\arm-none-eabi\\includ
 1057              		.file 16 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\arm-none-eabi\\includ
 1058              		.file 17 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\lib\\gcc\\arm-none-ea
 1059              		.file 18 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\arm-none-eabi\\includ
 1060              		.file 19 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\arm-none-eabi\\includ
 1061              		.file 20 "Core/Inc/main.h"
 1062              		.file 21 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_spi.h"
 1063              		.file 22 "Middlewares/ST/STM32_SPWF0xSy/Inc/wifi_interface.h"
 1064              		.file 23 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\arm-none-eabi\\includ
 1065              		.file 24 "Middlewares/ST/STM32_SPWF0xSy/Utils/event_buffer.h"
 1066              		.file 25 "Middlewares/ST/STM32_SPWF0xSy/Inc/wifi_module.h"
 1067              		.file 26 "Middlewares/ST/STM32_SPWF0xSy/Utils/wifi_globals.h"
 1068              		.file 27 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h"
 1069              		.file 28 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\arm-none-eabi\\includ
 1070              		.file 29 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\arm-none-eabi\\includ
 1071              		.file 30 "Core/Inc/retarget.h"
 1072              		.file 31 "<built-in>"
ARM GAS  D:\cygwin64\tmp\cci2TeQV.s 			page 31


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
D:\cygwin64\tmp\cci2TeQV.s:18     .text.MX_GPIO_Init:00000000 $t
D:\cygwin64\tmp\cci2TeQV.s:24     .text.MX_GPIO_Init:00000000 MX_GPIO_Init
D:\cygwin64\tmp\cci2TeQV.s:57     .text.MX_GPIO_Init:00000020 $d
D:\cygwin64\tmp\cci2TeQV.s:62     .text.MX_USART2_UART_Init:00000000 $t
D:\cygwin64\tmp\cci2TeQV.s:68     .text.MX_USART2_UART_Init:00000000 MX_USART2_UART_Init
D:\cygwin64\tmp\cci2TeQV.s:115    .text.MX_USART2_UART_Init:0000002c $d
                            *COM*:00000040 huart2
D:\cygwin64\tmp\cci2TeQV.s:121    .text.SystemClock_Config:00000000 $t
D:\cygwin64\tmp\cci2TeQV.s:128    .text.SystemClock_Config:00000000 SystemClock_Config
D:\cygwin64\tmp\cci2TeQV.s:237    .text.SystemClock_Config:00000088 $d
D:\cygwin64\tmp\cci2TeQV.s:243    .text.wifi_get_AP_settings:00000000 $t
D:\cygwin64\tmp\cci2TeQV.s:250    .text.wifi_get_AP_settings:00000000 wifi_get_AP_settings
D:\cygwin64\tmp\cci2TeQV.s:356    .text.wifi_get_AP_settings:00000098 $d
                            *COM*:00000028 console_ssid
                            *COM*:00000014 console_psk
                            *COM*:00000014 console_host
D:\cygwin64\tmp\cci2TeQV.s:378    .text.main:00000000 $t
D:\cygwin64\tmp\cci2TeQV.s:385    .text.main:00000000 main
D:\cygwin64\tmp\cci2TeQV.s:507    .text.main:00000094 $d
D:\cygwin64\tmp\cci2TeQV.s:516    .text.main:000000b8 $t
D:\cygwin64\tmp\cci2TeQV.s:682    .text.main:00000194 $d
                            *COM*:00000038 config
                            *COM*:00000001 wifi_state
                            *COM*:00000014 wifi_ip_addr
                            *COM*:00000400 user_buffer
D:\cygwin64\tmp\cci2TeQV.s:719    .text.print:00000000 $t
D:\cygwin64\tmp\cci2TeQV.s:726    .text.print:00000000 print
D:\cygwin64\tmp\cci2TeQV.s:739    .text.ind_wifi_on:00000000 $t
D:\cygwin64\tmp\cci2TeQV.s:746    .text.ind_wifi_on:00000000 ind_wifi_on
D:\cygwin64\tmp\cci2TeQV.s:761    .text.ind_wifi_on:00000008 $d
D:\cygwin64\tmp\cci2TeQV.s:766    .text.ind_wifi_connected:00000000 $t
D:\cygwin64\tmp\cci2TeQV.s:773    .text.ind_wifi_connected:00000000 ind_wifi_connected
D:\cygwin64\tmp\cci2TeQV.s:788    .text.ind_wifi_connected:00000008 $d
D:\cygwin64\tmp\cci2TeQV.s:793    .text.ind_wifi_http_data_available:00000000 $t
D:\cygwin64\tmp\cci2TeQV.s:800    .text.ind_wifi_http_data_available:00000000 ind_wifi_http_data_available
D:\cygwin64\tmp\cci2TeQV.s:824    .text.ind_wifi_http_data_available:00000010 $d
D:\cygwin64\tmp\cci2TeQV.s:871    .data.baud_rate:00000000 baud_rate
D:\cygwin64\tmp\cci2TeQV.s:884    .data.gcfg_key2:00000000 gcfg_key2
D:\cygwin64\tmp\cci2TeQV.s:877    .data.gcfg_key1:00000000 gcfg_key1
D:\cygwin64\tmp\cci2TeQV.s:904    .data.post_hostname:00000000 post_hostname
D:\cygwin64\tmp\cci2TeQV.s:891    .data.hostname:00000000 hostname
D:\cygwin64\tmp\cci2TeQV.s:897    .data.mode:00000000 mode
D:\cygwin64\tmp\cci2TeQV.s:911    .data.seckey:00000000 seckey
D:\cygwin64\tmp\cci2TeQV.s:918    .data.ssid:00000000 ssid
                            *COM*:00000040 UART_MsgHandle
D:\cygwin64\tmp\cci2TeQV.s:864    .bss.set_AP_config:00000000 set_AP_config
D:\cygwin64\tmp\cci2TeQV.s:853    .bss.console_count:00000000 console_count
                            *COM*:00000001 cin
D:\cygwin64\tmp\cci2TeQV.s:859    .bss.http_post_request:00000000 http_post_request
                            *COM*:00000001 http_char
D:\cygwin64\tmp\cci2TeQV.s:854    .bss.console_count:00000000 $d
D:\cygwin64\tmp\cci2TeQV.s:860    .bss.http_post_request:00000000 $d
D:\cygwin64\tmp\cci2TeQV.s:865    .bss.set_AP_config:00000000 $d
D:\cygwin64\tmp\cci2TeQV.s:867    .data.baud_rate:00000000 $d
D:\cygwin64\tmp\cci2TeQV.s:874    .data.gcfg_key1:00000000 $d
ARM GAS  D:\cygwin64\tmp\cci2TeQV.s 			page 32


D:\cygwin64\tmp\cci2TeQV.s:880    .data.gcfg_key2:00000000 $d
D:\cygwin64\tmp\cci2TeQV.s:887    .data.hostname:00000000 $d
D:\cygwin64\tmp\cci2TeQV.s:900    .data.post_hostname:00000000 $d
D:\cygwin64\tmp\cci2TeQV.s:907    .data.seckey:00000000 $d
D:\cygwin64\tmp\cci2TeQV.s:914    .data.ssid:00000000 $d
D:\cygwin64\tmp\cci2TeQV.s:921    .rodata.main.str1.4:00000000 $d
D:\cygwin64\tmp\cci2TeQV.s:978    .rodata.str1.4:00000000 $d
D:\cygwin64\tmp\cci2TeQV.s:997    .rodata.wifi_get_AP_settings.str1.4:00000000 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
HAL_UART_Init
Error_Handler
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
puts
fflush
printf
strlen
memcpy
_impure_ptr
HAL_Init
RetargetInit
wifi_init
wifi_connect
wifi_get_IP_address
GET_Configuration_Value
wifi_http_get
wifi_http_post
putchar
HAL_Delay
